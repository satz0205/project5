version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@2.0.3

jobs:
  build-lint:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv proj5
            . proj5/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./proj5
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . proj5/bin/activate 
              make lint 
  
  build-image:
    docker:
      - image: circleci/buildpack-deps:stretch
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build-image
          command: |
            docker build -t capstoneproj5 .  
            docker image ls
      - run:
          name: upload-image
          command: |
            dockerpath=satz0205/capstoneproj5
            docker login -u="satz0205" -p="Eduku@0205"
            docker image tag capstoneproj5 $dockerpath
            docker push $dockerpath
  
  cluster-creation:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install_awscli
          command: |
            apk add --update tar gzip nodejs npm curl
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install 
      - run:
          name: eks_install
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version     
      - run:
          name: kubetctl_install
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            
      - run:
            name: ekscluster_creation
            command: |
             eksctl create cluster --name capstoneproj5 --region us-east-1  --zones us-east-1a,us-east-1b,us-east-1c
             eksctl get cluster --name=capstoneproj5 --region=us-east-1
  
  deploy:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - checkout
      - run:
          command: |
            pwd 
            ls -ltra
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstoneproj5
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/capstoneproj5
          show-kubectl-command: true
  
  check-cluster:
    executor: aws-eks/python3
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: capstone-kk
      - run:
          name: kubetctl_install
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
    steps:
      - run:
          name: Check Cluster status
          command: |
              apk add --update tar gzip nodejs npm curl
              echo '------------------Describe Deployment---------------------'
              kubectl describe deployment capstone
              echo '------------------Get Deployment-----------------------------'
              kubectl get deployments
              echo '------------------svc,nodes--------------------------------'
              kubectl get svc
              kubectl get nodes
              echo '-------------------pods-------------------------------------'
              kubectl get pods --all-namespaces
              echo '-------------------config view------------------------------'
              kubectl config view 
            
workflows:
  default:
    jobs:
    #  - build-lint
    #  - build-image:
    #      requires: [build-lint]
    #  - cluster-creation:
    #      requires: [build-image]
    # - deploy
    #      requires: [cluster-creation]
      - check-cluster
     
          